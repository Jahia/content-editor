# This workflow will do a clean install of node dependencies v11.x, run linter and tests
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  install-and-test:
    runs-on: ubuntu-latest
    steps:
      # Add Node.js and Java
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '11.x'
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: checkout sources
        uses: actions/checkout@v2

      # Let's play with Maven and Yarn cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use yarn cache
        uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
#      - name: Use maven cache
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-


      - name: yarn install
        run: yarn install --frozen-lockfile

#      - name: generate target folder
#        run: mvn initialize

      - name: build
        run: yarn webpack

      - name: linter
        run: yarn lint

      - name: test
        run: yarn test
