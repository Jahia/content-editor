version: 2.1

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .

jobs:
  checkout:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - *persist-workspace

  build:
    parameters:
      is_pull_request:
        type: boolean
        default: false
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: xlarge
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - when:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: mvn clean install
                command: mvn -s .circleci/.circleci.settings.xml clean install
      - unless:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: mvn clean deploy
                command: mvn -s .circleci/.circleci.settings.xml clean deploy
      - save_cache:
          paths:
            - ~/.m2
          key: v3-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Copy artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
      - *persist-workspace

  sonar:
    parameters:
      is_pull_request:
        type: boolean
        default: false
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: large
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - when:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: Analyze pull request with sonar
                command: |
                  mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                  -Dsonar.pullrequest.key=<< pipeline.parameters.pull_request_number >> \
                  -Dsonar.pullrequest.base=<< pipeline.parameters.target_branch >> \
                  -Dsonar.pullrequest.github.repository=<< pipeline.parameters.github_repository >>
      - unless:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: Sonar analysis
                command: |
                  if [[ "${CIRCLE_BRANCH}" == "master" ]];
                  then
                    mvn -s .circleci/.circleci.settings.xml sonar:sonar
                  else
                    mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.branch.name=$CIRCLE_BRANCH
                  fi
      - save_cache:
          paths:
            - ~/.m2
          key: v3-dependencies-{{ checksum "pom.xml" }}

  release-prepare:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: xlarge
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - add_ssh_keys:
          fingerprints:
            - "c8:ce:25:8e:38:6d:56:41:5b:a8:da:16:32:0b:14:47"
      - run:
          name: Add github.com to known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Release prepare version for <<pipeline.parameters.release_version>>
          command: |
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
            FINAL_RELEASE_VERSION=$(echo <<pipeline.parameters.release_version>> | cut -d'-' -f 1)
            MAJOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f1`
            MINOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f2`
            REVISION=`echo $FINAL_RELEASE_VERSION | cut -d. -f3`
            NEXT_REVISION=`expr $REVISION + 1`
            NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT
            mvn -B -Dtag=$FINAL_RELEASE_VERSION release:prepare -DreleaseVersion=$FINAL_RELEASE_VERSION -DdevelopmentVersion="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT -DignoreSnapshots=true
      - save_cache:
          paths:
            - ~/.m2
          key: v3-dependencies-{{ checksum "pom.xml" }}
      - store_artifacts:
          path: /tmp/artifacts/
      - *persist-workspace

  update-github-release:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: xlarge
    steps:
      - *attach-workspace
      - add_ssh_keys:
          fingerprints:
            - "c8:ce:25:8e:38:6d:56:41:5b:a8:da:16:32:0b:14:47"
      - run:
          name: Add github.com to known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Update github release for id << pipeline.parameters.release_id >>
          command: |
            FINAL_RELEASE_VERSION=$(echo <<pipeline.parameters.release_version>> | cut -d'-' -f 1)
            curl -X PATCH \
            -H "Accept:application/vnd.github.v3+json" \
            -d "{\"tag_name\":\"${FINAL_RELEASE_VERSION}\", \"prerelease\": false}" -u \
            jahia-ci:$GITHUB_API_TOKEN https://api.github.com/repos/jahia/content-editor/releases/<< pipeline.parameters.release_id >>

            git push --delete origin <<pipeline.parameters.release_version>>
      - *persist-workspace

  release-perform:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: xlarge
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run:
          name: Perform release
          command: |
            echo "release here"
      - *persist-workspace
# Pipeline parameter must be declared
parameters:
  run_pull_request:
    type: boolean
    default: false
  target_branch:
    type: string
    default: ""
  pull_request_number:
    type: string
    default: ""
  github_repository:
    type: string
    default: ""
  release_id:
    type: string
    default: ""
  release_version:
    type: string
    default: ""
  is_release:
    type: boolean
    default: false

workflows:
  version: 2
  # This one is run only when triggered with the API, using a GitHub action
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - checkout:
          name: PR Checkout
      - build:
          name: PR Build
          is_pull_request: true
          context: QA_ENVIRONMENT
          requires:
            - PR Checkout
      - sonar:
          name: PR Sonar analysis
          is_pull_request: true
          context: QA_ENVIRONMENT
          requires:
            - PR Build
  on-code-change:
    unless: << pipeline.parameters.is_release >>
    jobs:
      - checkout:
          filters:
            branches:
              only:
                - master
                - /feature-.*/
                - /[0-9]_[0-9]_x/
      - build:
          is_pull_request: false
          context: QA_ENVIRONMENT
          requires:
            - checkout
      - sonar:
          name: Sonar analysis
          is_pull_request: false
          context: QA_ENVIRONMENT
          requires:
            - build

  on-release:
    when: << pipeline.parameters.is_release >>
    jobs:
      - checkout
      - release-prepare:
         context: QA_ENVIRONMENT
         requires:
           - checkout
      - update-github-release:
          context: QA_ENVIRONMENT
          requires:
            - release-prepare
      - release-perform:
          type: approval
          context: QA_ENVIRONMENT
          requires:
            - update-github-release
